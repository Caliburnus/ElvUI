local E, L, V, P, G, _ = unpack(select(2, ...)); --Inport: Engine, Locales, PrivateDB, ProfileDB, GlobalDB, Localize Underscore
local B = E:NewModule('Bags', 'AceHook-3.0', 'AceEvent-3.0');

local BAGTYPE_PROFESSION = 0x0008 + 0x0010 + 0x0020 + 0x0040 + 0x0080 + 0x0200 + 0x0400
local BAGTYPE_FISHING = 32768

local function Tooltip_Hide(self)
	if self.backdropTexture then
		self:SetBackdropBorderColor(unpack(E.media.bordercolor))
	end

	GameTooltip:Hide()
end

local function Tooltip_Show(self)
	GameTooltip:SetOwner(self:GetParent(), "ANCHOR_TOP", 0, 4)
	GameTooltip:ClearLines()
	GameTooltip:AddLine(self.ttText)

	if self.ttText2 then
		GameTooltip:AddLine(' ')
		GameTooltip:AddDoubleLine(self.ttText2, self.ttText2desc, 1, 1, 1)
	end

	GameTooltip:Show()

	if self.backdropTexture then
		self:SetBackdropBorderColor(unpack(E.media.rgbvaluecolor))
	end
end

local function OpenEditbox(self)
	self:GetParent().detail:Hide()
	self:GetParent().editBox:Show()
	self:GetParent().editBox:SetText(SEARCH)
	self:GetParent().editBox:HighlightText()
end

local function ResetAndClear(self)
	if self:GetParent().detail then
		self:GetParent().detail:Show()
	end

	self:ClearFocus()
	B:SearchReset()
end

function B:GetContainerFrame(arg)
	if type(arg) == 'boolean' and arg == true then
		return self.BankFrame
	elseif type(arg) == 'number' then
		if self.BankFrame then
			for _, bagID in ipairs(self.BankFrame.BagIDs) do
				if bagID == arg then
					return self.BankFrame
				end
			end
		end
	end
	
	return self.BagFrame
end

function B:SearchReset()
	--set all bag icons to not be desaturated and alpha to 1
end

function B:DisableBlizzard()
	BankFrame:UnregisterAllEvents()
	
	for i=1, NUM_CONTAINER_FRAMES do
		_G['ContainerFrame'..i]:Kill()
	end
end

function B:UpdateSlot(bagID, slotID)
	local slot = self.Bags[bagID][slotID]
	local bagType = self.Bags[bagID].type
	local texture, count, locked = GetContainerItemInfo(bagID, slotID)
	local clink = GetContainerItemLink(bagID, slotID)
	
	slot:Show()
	if slot.cooldown then
		local start, duration, enable = GetContainerItemCooldown(bagID, slotID)
		CooldownFrame_SetTimer(slot.cooldown, start, duration, enable)
		if ( duration > 0 and enable == 0 ) then
			SetItemButtonTextureVertexColor(slot, 0.4, 0.4, 0.4);
		else
			SetItemButtonTextureVertexColor(slot, 1, 1, 1);
		end
	end
	
	slot.questIcon:Hide()
	slot.name, slot.rarity = nil, nil

	if (clink) then
		local iType
		slot.name, _, slot.rarity, _, _, iType = GetItemInfo(clink)
		
		local isQuestItem, questId, isActiveQuest = GetContainerItemQuestInfo(bagID, slotID);
	
		-- color slot according to item quality
		if questId and not isActive then
			slot:SetBackdropBorderColor(1.0, 0.3, 0.3)
			slot.questIcon:Show()
		elseif questId or isQuestItem then
			slot:SetBackdropBorderColor(1.0, 0.3, 0.3)
		elseif slot.rarity and slot.rarity > 1 then
			local r, g, b = GetItemQualityColor(slot.rarity)
			slot:SetBackdropBorderColor(r, g, b)
		else
			slot:SetBackdropBorderColor(unpack(E.media.bordercolor))
		end
	else
		slot:SetBackdropBorderColor(unpack(E.media.bordercolor))
	end

	SetItemButtonTexture(slot, texture)
	SetItemButtonCount(slot, count)
	SetItemButtonDesaturated(slot, locked, 0.5, 0.5, 0.5)
end

function B:UpdateBagSlots(bagID)
	for slotID = 1, GetContainerNumSlots(bagID) do
		if self.UpdateSlot then
			self:UpdateSlot(bagID, slotID)	
		else
			self:GetParent():UpdateSlot(bagID, slotID)
		end
	end
end

function B:UpdateAllSlots()
	for _, bagID in ipairs(self.BagIDs) do
		self.Bags[bagID]:UpdateBagSlots(bagID)
	end
end

function B:Layout(isBank)
	if E.private.bags.enable ~= true then return end
	local f = self:GetContainerFrame(isBank)
	
	if not f then return; end
	local buttonSize = 38
	local buttonSpacing = 4
	local containerWidth = E.db.chat.panelWidth - 10
	local numContainerColumns = math.floor(containerWidth / (buttonSize + buttonSpacing))
	local holderWidth = ((buttonSize + buttonSpacing) * numContainerColumns) - buttonSpacing
	local numContainerRows = 0
	local bottomPadding = (containerWidth - holderWidth) / 2
	f.holderFrame:Width(holderWidth)

	f.totalSlots = 0
	
	local lastButton
	local lastRowButton
	for _, bagID in ipairs(f.BagIDs) do
		local numSlots = GetContainerNumSlots(bagID)
		if numSlots > 0 then
			if not f.Bags[bagID] then
				f.Bags[bagID] = CreateFrame('Frame', f:GetName()..'Bag'..bagID, f)
				f.Bags[bagID]:SetID(bagID)
				f.Bags[bagID].UpdateBagSlots = B.UpdateBagSlots
				f.Bags[bagID].UpdateSlot = UpdateSlot
			end
			
			f.Bags[bagID].numSlots = numSlots
			f.Bags[bagID].type = select(2, GetContainerNumFreeSlots(bagID))
			
			--Hide unused slots
			for i = 1, MAX_CONTAINER_ITEMS do
				if f.Bags[bagID][i] then
					f.Bags[bagID][i]:Hide()
				end
			end			

			for slotID = 1, numSlots do
				f.totalSlots = f.totalSlots + 1
				if not f.Bags[bagID][slotID] then
					f.Bags[bagID][slotID] = CreateFrame('CheckButton', f.Bags[bagID]:GetName()..'Slot'..slotID, f.Bags[bagID], isBank and 'BankItemButtonGenericTemplate' or 'ContainerFrameItemButtonTemplate')
					f.Bags[bagID][slotID]:StyleButton()
					f.Bags[bagID][slotID]:SetTemplate('Default', true)
					f.Bags[bagID][slotID]:SetNormalTexture(nil)
					f.Bags[bagID][slotID]:SetCheckedTexture(nil)
					
					f.Bags[bagID][slotID].count:ClearAllPoints()
					f.Bags[bagID][slotID].count:Point('BOTTOMRIGHT', 0, 2)
					
					f.Bags[bagID][slotID].questIcon = _G[f.Bags[bagID][slotID]:GetName()..'IconQuestTexture']
					f.Bags[bagID][slotID].questIcon:SetTexture(TEXTURE_ITEM_QUEST_BANG)
					f.Bags[bagID][slotID].questIcon:SetInside(f.Bags[bagID][slotID])
					f.Bags[bagID][slotID].questIcon:SetTexCoord(unpack(E.TexCoords))
					f.Bags[bagID][slotID].questIcon:Hide()
					
					f.Bags[bagID][slotID].iconTexture = _G[f.Bags[bagID][slotID]:GetName()..'IconTexture']
					f.Bags[bagID][slotID].iconTexture:SetInside(f.Bags[bagID][slotID])
					f.Bags[bagID][slotID].iconTexture:SetTexCoord(unpack(E.TexCoords))
					
					f.Bags[bagID][slotID].cooldown = _G[f.Bags[bagID][slotID]:GetName()..'Cooldown']
				end
				
				f.Bags[bagID][slotID]:SetID(slotID)
				f.Bags[bagID][slotID]:Size(buttonSize)
				
				
				
				f:UpdateSlot(bagID, slotID)
				
				if f.Bags[bagID][slotID]:GetPoint() then
					f.Bags[bagID][slotID]:ClearAllPoints()
				end
				
				if lastButton then
					if (f.totalSlots - 1) % numContainerColumns == 0 then
						f.Bags[bagID][slotID]:Point('TOP', lastRowButton, 'BOTTOM', 0, -buttonSpacing)
						lastRowButton = f.Bags[bagID][slotID]
						numContainerRows = numContainerRows + 1
					else
						f.Bags[bagID][slotID]:Point('LEFT', lastButton, 'RIGHT', buttonSpacing, 0)
					end
				else
					f.Bags[bagID][slotID]:Point('TOPLEFT', f.holderFrame, 'TOPLEFT')
					lastRowButton = f.Bags[bagID][slotID]
					numContainerRows = numContainerRows + 1
				end
				
				lastButton = f.Bags[bagID][slotID]
			end
		end		
	end

	f:Size(containerWidth, (((buttonSize + buttonSpacing) * numContainerRows) - buttonSpacing) + f.topOffset + 8) -- 8 is the cussion of the f.holderFrame
end

function B:OnEvent(event, ...)
	if event == 'ITEM_LOCK_CHANGED' or event == 'ITEM_UNLOCKED' then
		self:UpdateSlot(...)
	elseif event == 'BAG_UPDATE' then
		self:UpdateBagSlots(...)
	end
end

function B:ContructContainerFrame(name, isBank)
	local f = CreateFrame('Frame', name, E.UIParent)
	f:SetTemplate('Transparent')
	f:SetFrameStrata('DIALOG')
	f.UpdateSlot = B.UpdateSlot
	f.UpdateAllSlots = B.UpdateAllSlots	
	f.UpdateBagSlots = B.UpdateBagSlots
	f:RegisterEvent('ITEM_LOCK_CHANGED')
	f:RegisterEvent('ITEM_UNLOCKED')
	f:RegisterEvent('BAG_UPDATE')
	f:SetScript('OnEvent', B.OnEvent)	
	f:Hide()
	
	f.topOffset = isBank and 30 or 60
	f.BagIDs = isBank and {-1, 5, 6, 7, 8, 9, 10, 11} or {0, 1, 2, 3, 4}
	f.Bags = {};
	
	f.closeButton = CreateFrame('Button', name..'CloseButton', f)
	f.closeButton:Point('TOPRIGHT', -4, -4)
	f.closeButton:Size(15)
	f.closeButton:SetScript('OnClick', function() f:Hide() end)	
	f.closeButton:SetTemplate('Default', true)
	f.closeButton.text = f.closeButton:CreateFontString(nil, 'OVERLAY')
	f.closeButton.text:FontTemplate(nil, 10)
	f.closeButton.text:SetText('X')
	f.closeButton.text:SetJustifyH('CENTER')
	f.closeButton.text:SetPoint('CENTER')
	
	f.holderFrame = CreateFrame('Frame', nil, f)
	f.holderFrame:Point('TOP', f, 'TOP', 0, -f.topOffset)
	f.holderFrame:Point('BOTTOM', f, 'BOTTOM', 0, 8)

	return f
end

function B:PositionBagFrames()
	if self.BagFrame then
		self.BagFrame:Point('BOTTOMRIGHT', RightChatToggleButton, 'TOPRIGHT', 0 - E.db.bags.xOffset, 4 + E.db.bags.yOffset)
	end
	
	if self.BankFrame then
		self.BankFrame:Point('BOTTOMLEFT', LeftChatToggleButton, 'TOPLEFT', 0 + E.db.bags.xOffset, 4 + E.db.bags.yOffset)
	end
end

function B:ToggleBags()
	if self.BagFrame:IsShown() then
		self:CloseBags()
	else
		self:OpenBags()
	end
end

function B:OpenBags()
	self.BagFrame:Show()
	self.BagFrame:UpdateAllSlots()
end

function B:CloseBags()
	self.BagFrame:Hide()
	
	if self.BankFrame then
		self.BankFrame:Hide()
	end
end

function B:Initialize()
	self:LoadBagBar()

	if not E.private.bags.enable then 
		self:SecureHook('UpdateContainerFrameAnchors')
		return 
	end
	
	self.BagFrame = self:ContructContainerFrame('ElvUI_ContainerFrame')

	--Hook onto Blizzard Functions
	self:SecureHook('ToggleAllBags', 'ToggleBags')
	self:SecureHook('OpenAllBags', 'OpenBags')
	self:SecureHook('CloseAllBags', 'CloseBags')
	self:PositionBagFrames()
	self:Layout()

	E.Bags = self

	self:DisableBlizzard()

	StackSplitFrame:SetFrameStrata('DIALOG')
end

hooksecurefunc('UpdateContainerFrameAnchors', function()
	local frame, xOffset, yOffset, screenHeight, freeScreenHeight, leftMostPoint, column;
	local screenWidth = GetScreenWidth();
	local containerScale = 1;
	local leftLimit = 0;
	if ( BankFrame:IsShown() ) then
		leftLimit = BankFrame:GetRight() - 25;
	end

	while ( containerScale > CONTAINER_SCALE ) do
		screenHeight = GetScreenHeight() / containerScale;
		-- Adjust the start anchor for bags depending on the multibars
		xOffset = CONTAINER_OFFSET_X / containerScale;
		yOffset = CONTAINER_OFFSET_Y / containerScale;
		-- freeScreenHeight determines when to start a new column of bags
		freeScreenHeight = screenHeight - yOffset;
		leftMostPoint = screenWidth - xOffset;
		column = 1;
		local frameHeight;
		for index, frameName in ipairs(ContainerFrame1.bags) do
			frameHeight = _G[frameName]:GetHeight();
			if ( freeScreenHeight < frameHeight ) then
				-- Start a new column
				column = column + 1;
				leftMostPoint = screenWidth - ( column * CONTAINER_WIDTH * containerScale ) - xOffset;
				freeScreenHeight = screenHeight - yOffset;
			end
			freeScreenHeight = freeScreenHeight - frameHeight - VISIBLE_CONTAINER_SPACING;
		end
		if ( leftMostPoint < leftLimit ) then
			containerScale = containerScale - 0.01;
		else
			break;
		end
	end

	if ( containerScale < CONTAINER_SCALE ) then
		containerScale = CONTAINER_SCALE;
	end

	screenHeight = GetScreenHeight() / containerScale;
	-- Adjust the start anchor for bags depending on the multibars
	xOffset = CONTAINER_OFFSET_X / containerScale;
	yOffset = CONTAINER_OFFSET_Y / containerScale;
	-- freeScreenHeight determines when to start a new column of bags
	freeScreenHeight = screenHeight - yOffset;
	column = 0;

	local bagsPerColumn = 0
	for index, frameName in ipairs(ContainerFrame1.bags) do
		frame = _G[frameName];
		frame:SetScale(1);
		if ( index == 1 ) then
			-- First bag
			frame:SetPoint("BOTTOMRIGHT", RightChatToggleButton, "TOPRIGHT", 2, 2);
			bagsPerColumn = bagsPerColumn + 1
		elseif ( freeScreenHeight < frame:GetHeight() ) then
			-- Start a new column
			column = column + 1;
			freeScreenHeight = screenHeight - yOffset;
			if column > 1 then
				frame:SetPoint("BOTTOMRIGHT", ContainerFrame1.bags[(index - bagsPerColumn) - 1], "BOTTOMLEFT", -CONTAINER_SPACING, 0 );
			else
				frame:SetPoint("BOTTOMRIGHT", ContainerFrame1.bags[index - bagsPerColumn], "BOTTOMLEFT", -CONTAINER_SPACING, 0 );
			end
			bagsPerColumn = 0
		else
			-- Anchor to the previous bag
			frame:SetPoint("BOTTOMRIGHT", ContainerFrame1.bags[index - 1], "TOPRIGHT", 0, CONTAINER_SPACING);
			bagsPerColumn = bagsPerColumn + 1
		end
		freeScreenHeight = freeScreenHeight - frame:GetHeight() - VISIBLE_CONTAINER_SPACING;
	end
end)

E:RegisterModule(B:GetName())